smooth.labels <- names(smooth.frame)
smooth.wanted <- smooth.labels[match(smooth.labels, labels(fit),
0) > 0]
foreach(TT=smooth.wanted) %do%{
Call <- attr(smooth.frame[[TT]], "call")
# Call$xeval <- substitute(smooth.frame[[TT]], list(TT = TT))
z <- residuals + fit$smooth[, TT]
eval(Call)
}})
smoother_fits=with(fit,{
data=smooth.frame
w=weights
smooth.labels <- names(smooth.frame)
smooth.wanted <- smooth.labels[match(smooth.labels, labels(fit),
0) > 0]
foreach(TT=smooth.wanted) %do%{
Call <- attr(smooth.frame[[TT]], "call")
# Call$xeval <- substitute(smooth.frame[[TT]], list(TT = TT))
z <- residuals + fit$smooth[, TT]
eval(Call)
}})
smoother_fits
names(smoother_fits)
smoother_fits$1
smoother_fits[[1]]
coef(smoother_fits[[1]])
names(smoother_fits[[1]])
names(smoother_fits[[2]])
coef(smoother_fits[[2]])
smoother_fits[[2]]
extract_fits<-function(fit){
data <- fit$smooth.frame
w <- fit$weights
smooth.labels <- names(data)
smooth.wanted <- smooth.labels[match(smooth.labels, labels(fit),
0) > 0]
residuals <- fit$residuals
smoother_fits <- foreach(TT=smooth.wanted) %do%{
Call <- attr(data[[TT]], "call")
# Call$xeval <- substitute(smooth.frame[[TT]], list(TT = TT))
z <- residuals + fit$smooth[, TT]
eval(Call)
}
return(smoother_fits)
}
fit$smoother_fits=exctract_fits(fit)
fit$smoother_fits=extract_fits(fit)
fit$smoother_fits
source('~/Dropbox/gates/gasl/inst/rebuild.R')
library(gasl)
source(system.file("simulation", "DGD.R", package = "gasl"))
sim_data <- gen_data()
# fit basic models
true_fit <- glm(Y ~ A * W1 + W2 + W3, sim_data, family = "binomial")
sim_data$true_pred <- predict(true_fit, type = "response")
sim_data$null_pred <- mean(sim_data$Y)
sim_data$min_pred <- sim_data$Q0aW[cbind(1:nrow(sim_data), as.numeric(sim_data$A))]
# fit gasl define split between index variables and other variables
x_factor <- model.matrix(Y ~ W2 + W3 - 1, sim_data)
x_other <- model.matrix(Y ~ A * W1, sim_data)
y <- sim_data$Y
gasl_fit <- gasl(x_factor, x_other, y)
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
debugonce("predict.gasl")
test=predict.gasl(gasl_fit, newdata = gasl_fit$data, type = 'response')
test=predict.gasl(gasl_fit, newdata = gasl_fit$data, type = 'response')
gasl_fit <- gasl(x_factor, x_other, y)
debug(gam.slterms)
gasl_fit <- gasl(x_factor, x_other, y)
osl
osl$coef
gasl_fit <- gasl(x_factor, x_other, y)
osl <- do.call(origami_SuperLearner, all_args)
source('~/Dropbox/gates/gasl/inst/rebuild.R')
gasl_fit <- gasl(x_factor, x_other, y)
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
gasl_fit
gasl_fit[[1]]
coef(gasl_fit[[1]])
source('~/Dropbox/gates/gasl/inst/rebuild.R')
gasl_fit <- gasl(x_factor, x_other, y)
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
gasl_fit$smoother_fits
gasl_fit$smoother_fits
# for now, let's hardcode SL for other, and lm for factor
data <- list(x_factor = x_factor, x_other = x_other, y = y)
n <- length(y)
slargs <- list(SL.library = c("SL.glm", "SL.mean"), folds = make_folds(n))
formula <- y ~ linterms(x_factor) + slterms(x_other, slargs)
mt <- terms(formula, gasl.slist, data = data)
mf <- model.frame(mt, data)
# try to force faster convergence in backfitting
control <- gam::gam.control(trace = T, bf.epsilon = 0.001)
# force a constant, but no other terms fit using a linear model departs from gam package practice
X_const <- as.matrix(rep(1, n), ncol = 1, nrow = n)
colnames(X_const) <- "(Intercept)"
# debugonce('gam.fit')
fit <- gam::gam.fit(x = X_const, y = y, smooth.frame = mf, family = binomial(), control = control)
method <- "general.wam"
fit <- c(fit, list(call = call, formula = formula, terms = mt, model = mf, data = data, offset = offset, control = control, method = method,
contrasts = attr(X_const, "contrasts"), xlevels = .getXlevels(mt, mf)))
# actually store smoother fits
fit$smoother_fits <- extract_fits(fit)
fit$smoother_fits <- extract_fits(fit)
class(fit) <- c("gam", "glm", "lm")
fit
fit$smoother_fits
extract_fits(fit)
fit$smoother_fits <- extract_fits(fit)
fit$smoother_fits
fit <- c(fit, list(call = call, formula = formula, terms = mt, model = mf, data = data, offset = offset, control = control, method = method,
contrasts = attr(X_const, "contrasts"), xlevels = .getXlevels(mt, mf)))
fit <- gam::gam.fit(x = X_const, y = y, smooth.frame = mf, family = binomial(), control = control)
method <- "general.wam"
fit <- c(fit, list(call = call, formula = formula, terms = mt, model = mf, data = data, offset = offset, control = control, method = method,
contrasts = attr(X_const, "contrasts"), xlevels = .getXlevels(mt, mf)))
fit$smoother_fits <- extract_fits(fit)
fit$smoother_fits
extract_fits(fit)
data <- fit$smooth.frame
w <- fit$weights
smooth.labels <- names(data)
smooth.wanted <- smooth.labels[match(smooth.labels, labels(fit), 0) > 0]
residuals <- fit$residuals
smoother_fits <- foreach(TT = smooth.wanted) %do% {
Call <- attr(data[[TT]], "call")
# Call$xeval <- substitute(smooth.frame[[TT]], list(TT = TT))
z <- residuals + fit$smooth[, TT]
eval(Call)
}
smoother_fits
smooth.wanted
smooth.labels
labels(fit)
source('~/Dropbox/gates/gasl/inst/rebuild.R')
attr(gasl_fit$smooth.frame$`linterms(x_factor)`, "call")
gasl_fit <- gasl(x_factor, x_other, y)
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
# todo:this fails, need to fix debugonce('newdata.predict.gam') debugonce('predict.glm') something to do with hacking the linear fit out of
# gam predict(gasl_fit, newdata = data, type = 'response') gam doesn't store fits and so refits model one more time on predict with newdata
# seems computationally horrible in the case of SL
attr(gasl_fit$smooth.frame$`linterms(x_factor)`, "call")
gasl_fit$smoother_fits
gasl_fit$fitted.values-gasl_fit$smooth
gasl_fit$fitted.values-rowSums(gasl_fit$smooth)
rowSums(gasl_fit$smooth)
gasl_fit$fitted.values
rowSums(gasl_fit$smooth)
rowSums(gasl_fit$smooth)+gasl_fit$fitted.values
?gam
gasl_fit$additive.predictors
gasl_fit$additive.predictors-rowSums(gasl_fit$smooth)
gasl_fit$coefficients
object=fit
source('~/Dropbox/gates/gasl/R/predict.gasl.R')
data
newdata=data
names(newdata)
smoother_preds=lapply(object$smoother_fits,predict,newdata=newdata)
smoother_preds
object$smoother_fits
gasl_fit
object=gasl_fit
smoother_preds=lapply(object$smoother_fits,predict,newdata=newdata)
class(smoother_fits[[1]])
class(object$smoother_fits[[1]])
class(object$smoother_fits[[2]])
?lm.wfit
source('~/Dropbox/gates/gasl/inst/rebuild.R')
gasl_fit <- gasl(x_factor, x_other, y)
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
object=gasl_fit
smoother_preds=lapply(object$smoother_fits,predict,newdata=newdata)
object$smoother_fits
lm.wfit
?lm
source('~/Dropbox/gates/gasl/inst/rebuild.R')
source('~/Dropbox/gates/gasl/R/predict.gasl.R')
gasl_fit <- gasl(x_factor, x_other, y)
lm(y~x_factor)
source('~/Dropbox/gates/gasl/inst/rebuild.R')
gasl_fit <- gasl(x_factor, x_other, y)
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
seq(object$smoother_fits)
all_preds=foreach(j=seq(object$smoother_fits)) %do%{
preds=predict(object$smoother_fits[[j]],newdata=newdata[[j]])
}
j=1
object=gasl_fit
all_preds=foreach(j=seq(object$smoother_fits)) %do%{
preds=predict(object$smoother_fits[[j]],newdata=newdata[[j]])
}
source('~/Dropbox/gates/gasl/R/predict.gasl.R')
all_preds=foreach(j=seq(object$smoother_fits)) %do%{
preds=predict(object$smoother_fits[[j]],newdata=newdata[[j]])
if(is.list(preds)){
preds=preds$pred
}
}
predmat=do.call(cbind,all_preds)
predmat
all_preds[[1]]
all_preds[[2]]
source('~/Dropbox/gates/gasl/R/predict.gasl.R')
j=1
preds=predict(object$smoother_fits[[j]],newdata=newdata[[j]])
preds
source('~/Dropbox/gates/gasl/R/predict.gasl.R')
is.list(preds)
all_preds=foreach(j=seq(object$smoother_fits)) %do%{
preds=predict(object$smoother_fits[[j]],newdata=newdata[[j]])
if(is.list(preds)){
preds=preds$pred
}
}
all_preds[[1]]
source('~/Dropbox/gates/gasl/R/predict.gasl.R')
all_preds=foreach(j=seq(object$smoother_fits)) %do%{
preds=predict(object$smoother_fits[[j]],newdata=newdata[[j]])
if(is.list(preds)){
preds=preds$pred
}
preds
}
predmat=do.call(cbind,all_preds)
all_preds
predmat
source('~/Dropbox/gates/gasl/R/predict.gasl.R')
object$coefficients
link=rowSums(predmat)+object$coefficients
response=object$family$linkfun(link)
response=object$family$linkinv(link)
response
source('~/Dropbox/gates/gasl/R/predict.gasl.R')
all.equal(response,predict(gasl_fit))
all.equal(response,predict(gasl_fit,type="response"))
plot(response,predict(gasl_fit,type="response"))
setwd("~/Dropbox/gates/gasl/")
library(devtools)
library(formatR)
rebuild <- function() {
tidy_dir(recursive = T, arrow = T)
document()
build()
install()
load_all()
}
rebuild()
?tidy_source
tidy_dir(recursive = T, arrow = T)
tidy_source
mask_comments
formatR:::mask_comments
formatR:::reflow_comments
?reflow_comments
setwd("~/Dropbox/gates/gasl/")
library(devtools)
library(formatR)
rebuild <- function() {
tidy_dir(recursive = T, arrow = T)
document()
build()
install()
load_all()
}
rebuild()
package_version("formatR")
package_version()
packageDescription("formatR")
tidy_dir(recursive = T, arrow = T)
library(gasl)
source(system.file("simulation", "DGD.R", package = "gasl"))
sim_data <- gen_data()
# fit basic models
true_fit <- glm(Y ~ A * W1 + W2 + W3, sim_data, family = "binomial")
sim_data$true_pred <- predict(true_fit, type = "response")
sim_data$null_pred <- mean(sim_data$Y)
sim_data$min_pred <- sim_data$Q0aW[cbind(1:nrow(sim_data), as.numeric(sim_data$A))]
## fit gasl
## define split between index variables and other variables
x_factor <- model.matrix(Y ~ W2 + W3 - 1, sim_data)
x_other <- model.matrix(Y ~ A * W1, sim_data)
y <- sim_data$Y
gasl_fit <- gasl(x_factor, x_other, y)
?match.arg
setwd("~/Dropbox/gates/gasl/")
library(devtools)
library(formatR)
rebuild <- function() {
tidy_dir(recursive = T, arrow = T)
document()
build()
install()
load_all()
}
rebuild()
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
debugonce("predict.gasl")
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
gasl_fit <- gasl(x_factor, x_other, y)
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
?gam
source('~/Dropbox/gates/gasl/inst/rebuild.R')
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
source('~/Dropbox/gates/gasl/inst/rebuild.R')
gasl_fit <- gasl(x_factor, x_other, y)
debugonce("predict.gasl")
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
sim_data$gasl_pred <- predict(gasl_fit, newdata=gasl_fit$data, type = "response")
str(gasl_fit$data)
sim_data$gasl_pred <- predict(gasl_fit, newdata=as.data.frame(gasl_fit$data), type = "response")
debugonce("predict.gasl")
sim_data$gasl_pred <- predict(gasl_fit, newdata=as.data.frame(gasl_fit$data), type = "response")
sim_data$gasl_pred <- predict(gasl_fit, newdata=as.data.frame(gasl_fit$data), type = "response")
debugonce("predict.gasl")
sim_data$gasl_pred <- predict(gasl_fit, newdata=as.data.frame(gasl_fit$data), type = "response")
object$smoother_fits
names(object$smoother_fits)
names(object$smoother_fits[[1]])
names(object$terms)
object$terms
labels(object$terms)
83/5
83/15
X <- model.matrix( ~ A * W1 + W2 + W3, sim_data)
X
X <- model.matrix( ~ A * W1 + W2 + W3, sim_data)
Y <- sim_data$Y
factor_vars=c("W2","W3")
factor_cols=match(factor_vars,colnames(x))
factor_cols=match(factor_vars,colnames(X))
factor_cols
x_factor <- X[,factor_cols,drop=F]
x_other <- X[,-1 * factor_cols,drop=F]
gam_data <- list(x_factor = x_factor, x_other = x_other, y = Y)
other_vars=setdiff(colnames(X),factor_vars)
other_vars
?model.matrix
terms(X)
X
class(X)
other_vars=setdiff(colnames(X),factor_vars)
factor_cols=match(factor_vars,colnames(X))
other_vars=setdiff(colnames(X),factor_vars)
factor_cols=match(factor_vars,colnames(X))
x_factor <- X[,factor_cols,drop=F]
x_other <- X[,-1 * factor_cols,drop=F]
gam_data <- list(x_factor = x_factor, x_other = x_other, y = Y)
n <- length(y)
n <- length(Y)
slargs <- list(SL.library = c("SL.glm", "SL.mean"), folds = make_folds(n))
formula <- y ~ linterms(x_factor) + slterms(x_other, slargs)
mt <- terms(formula, gasl.slist, data = data)
split_x <-function(X,factor_vars){
factor_cols=match(factor_vars,colnames(X))
x_factor <- X[,factor_cols,drop=F]
x_other <- X[,-1 * factor_cols,drop=F]
gam_data <- list(x_factor = x_factor, x_other = x_other)
}
gam_data <- split_x(X,factor_vars)
gam_data$Y <- Y
formula <- Y ~ linterms(x_factor) + slterms(x_other, slargs)
mt <- terms(formula, gasl.slist, data = gam_data)
mf <- model.frame(mt, gam_data)
control <- gam::gam.control(trace = T, bf.epsilon = 0.001)
X_const <- as.matrix(rep(1, n), ncol = 1, nrow = n)
colnames(X_const) <- "(Intercept)"
fit <- gam::gam.fit(x = X_const, y = y, smooth.frame = mf, family = binomial(), control = control)
method <- "general.wam"
fit <- c(fit, list(call = call, formula = formula, terms = mt, model = mf, data = data, offset = offset,
control = control, method = method, contrasts = attr(X_const, "contrasts"), xlevels = .getXlevels(mt,
mf)))
class(fit) <- c("gasl", "gam", "glm", "lm")
fit$smoother_fits <- extract_fits(fit)
fit <- c(fit, list(call = call, formula = formula, terms = mt, model = mf, data = gam_data, offset = offset,
control = control, method = method, contrasts = attr(X_const, "contrasts"), xlevels = .getXlevels(mt,
mf)))
fit <- gam::gam.fit(x = X_const, y = y, smooth.frame = mf, family = binomial(), control = control)
method <- "general.wam"
fit <- c(fit, list(call = call, formula = formula, terms = mt, model = mf, data = gam_data, offset = offset,
control = control, method = method, contrasts = attr(X_const, "contrasts"), xlevels = .getXlevels(mt,
mf)))
class(fit) <- c("gasl", "gam", "glm", "lm")
# actually store smoother fits
fit$smoother_fits <- extract_fits(fit)
fit$factor_vars <- factor_vars
fit
gasl_fit <- gasl(X,Y, factor_vars)
source('~/Dropbox/gates/gasl/inst/rebuild.R')
gasl_fit <- gasl(X, Y, factor_vars)
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
sim_data$gasl_pred <- predict(gasl_fit, newdata = as.data.frame(gasl_fit$data), type = "response")
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
attr(gasl_fit$smooth.frame$`linterms(x_factor)`, "call")
gasl_fit$smoother_fits
# evaluate performance
dev <- function(Y, pred) {
dev_sign <- ifelse(Y == 1, 1, -1)
dev_sign * sqrt(-2 * (Y * log(pred) + (1 - Y) * log(1 - pred)))
}
risk <- function(Y, pred) {
mean(dev(Y, pred)^2)
}
risk(sim_data$Y, sim_data$null_pred)
risk(sim_data$Y, sim_data$gasl_pred)
risk(sim_data$Y, sim_data$true_pred)
risk(sim_data$Y, sim_data$min_pred)
object=gasl_fit
newdata=sim_data
new_gam_data <- split_x(newdata,object$factor_vars)
mt <- terms(object$formula, gasl.slist, data = new_gam_data)
mf <- model.frame(mt, new_gam_data)
labels(object$smoother_fits)
names(object$smoother_fits)
all_preds <- foreach(j = seq(object$smoother_fits)) %do% {
preds <- predict(object$smoother_fits[[j]], newdata = newdata[[j]])
if (is.list(preds)) {
preds <- preds$pred
}
preds
}
origami_SuperLearner(Y,gam_data$x_factor,family=binomial(),SL.library = "SL.randomForest")
sl=origami_SuperLearner(Y,gam_data$x_factor,family=binomial(),SL.library = "SL.randomForest")
sim_data$Q0aW[,1]
fakey=sim_data$Q0aW[,1]
sl=origami_SuperLearner(fakey,gam_data$x_factor,family=binomial(),SL.library = "SL.randomForest")
source('~/Dropbox/gates/gasl/inst/rebuild.R')
gasl_fit <- gasl(X, Y, factor_vars)
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
sim_data$gasl_pred <- predict(gasl_fit, newdata = as.data.frame(gasl_fit$data), type = "response")
object=gasl_fit
new_gam_data <- split_x(newdata, object$factor_vars)
mt <- terms(object$formula, gasl.slist, data = new_gam_data)
mf <- model.frame(mt, new_gam_data)
type <- match.arg(type)
type="response"
new_gam_data <- split_x(newdata, object$factor_vars)
mt <- terms(object$formula, gasl.slist, data = new_gam_data)
mf <- model.frame(mt, new_gam_data)
type <- match.arg(type)
type
all_preds <- foreach(j = seq(object$smoother_fits)) %do% {
preds <- predict(object$smoother_fits[[j]], newdata = newdata[[j]])
if (is.list(preds)) {
preds <- preds$pred
}
preds
}
j=1
preds <- predict(object$smoother_fits[[j]], newdata = newdata[[j]])
preds <- predict(object$smoother_fits[[j]], newdata = mf[[j]])
mf[[1]]
str(mf)
dim(mf)
mf[[,1]]
mf[,1]
mf[,2]
sapply(mf,dim)
preds <- predict(object$smoother_fits[[j]], newdata = mf[[j+1]])
all_preds <- foreach(j = seq(object$smoother_fits)) %do% {
preds <- predict(object$smoother_fits[[j]], newdata = mf[[j+1]])
if (is.list(preds)) {
preds <- preds$pred
}
preds
}
mf[3]
names(mf[3])
names(mf[,3])
head(mf[,3])
names(mf[,3])
mf[1:4,3]
mf[[3]]
colnames(mf[[3]])
mt <- terms(object$formula, gasl.slist, data = new_gam_data)
mf <- model.frame(mt, new_gam_data)
colnames(mf[[3]])
sim_data$gasl_pred <- predict(gasl_fit, newdata = as.data.frame(X), type = "response")
source('~/Dropbox/gates/gasl/inst/rebuild.R')
sim_data$gasl_pred <- predict(gasl_fit, newdata = as.data.frame(X), type = "response")
risk(sim_data$Y, sim_data$gasl_pred)
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
source('~/Dropbox/gates/gasl/inst/rebuild.R')
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
sim_data$gasl_pred <- predict(gasl_fit, newdata = as.data.frame(X), type = "response")
lapply(gasl_fit$smoother_fits,coef)
lapply(gasl_fit$smoother_fits,`[[`,"coef")
lapply(gasl_fit$smoother_fits,`[[`,"coeffecients")
gasl_fit$smoother_fits[[1]]$coefficients
gasl_fit$smoother_fits[[2]]$coefficients
gasl_fit$smoother_fits[[2]]$coef
setwd("~/Dropbox/gates/gasl/")
library(devtools)
library(formatR)
rebuild <- function() {
tidy_dir(recursive = T, arrow = T)
document()
build()
install()
load_all()
}
rebuild()
gasl_fit <- gasl(X, Y, factor_vars)
sim_data$gasl_pred <- predict(gasl_fit, type = "response")
sim_data$gasl_pred <- predict(gasl_fit, newdata = as.data.frame(X), type = "response")
lapply(gasl_fit$smoother_fits,`[[`,"coeffecients")
gasl_fit$smoother_fits[[1]]$coefficients
gasl_fit$smoother_fits[[2]]$coef
?strptime
622-584
38/2
53-19
